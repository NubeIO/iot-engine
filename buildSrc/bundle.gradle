import java.time.Instant
import java.util.jar.Attributes.Name

import org.gradle.util.GradleVersion

jar {
    baseName = project.computeBaseName()
    doFirst {
        def classPath = configurations.runtime.isEmpty() ? "" : configurations.runtime.files.collect {
            it.getName()
        }.join(' ')
        def javaVersion = System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
        GradleVersion gradleVersion = GradleVersion.current()

        println '- Project Name:     ' + baseName
        println '- Project Title:    ' + project.title
        println '- Project Group:    ' + project.group
        println '- Project Version:  ' + project.version
        println '- Semantic Version: ' + project.semanticVersion
        println '- Build Number:     ' + project.buildNumber
        println '- Java Version:     ' + javaVersion
        println '- Gradle Version:   ' + gradleVersion.version
        println '- Vertx Version:    ' + project.versions.vertx

        def manifestMap = [
            (Name.MANIFEST_VERSION.toString())      : '1.0',
            (Name.IMPLEMENTATION_TITLE.toString())  : "${baseName}",
            (Name.IMPLEMENTATION_VENDOR.toString()) : "${project.vendor}",
            (Name.IMPLEMENTATION_VERSION.toString()): "${project.buildNumber}",
            (Name.SIGNATURE_VERSION.toString())     : "${project.buildHash}",
            (Name.SPECIFICATION_TITLE.toString())   : "${project.title}",
            (Name.SPECIFICATION_VENDOR.toString())  : "${project.vendor}",
            (Name.SPECIFICATION_VERSION.toString()) : "${project.version}",
            'Build-Date'                            : Instant.now(),
            'Build-By'                              : "${project.buildBy}",
            'Java-Version'                          : "${javaVersion}",
            'Gradle-Version'                        : "${gradleVersion.version}",
            'Vertx-Version'                         : "${project.versions.vertx}",
            'Class-Path'                            : "${classPath}"
        ]
        if (project.hasProperty("executable") && project.executable == "true") {
            if (project.mainClass.trim() == "" || project.mainVerticle.trim() == "") {
                throw new TaskExecutionException(project.tasks.jar, new RuntimeException("Missing mainClass or " +
                                                                                         "mainVerticle"))
            }
            manifestMap << ['Main-Class': "${project.mainClass}", 'Main-Verticle': "${project.mainVerticle}"]
        }
        manifest {
            attributes(manifestMap)
        }
    }
}

distZip {
    onlyIf {
        project.hasProperty("executable") && project.executable == "true"
    }
    baseName = project.computeBaseName()
}

distTar {
    onlyIf {
        project.hasProperty("executable") && project.executable == "true"
    }
    baseName = project.computeBaseName()
}

task sourcesJar(type: Jar, dependsOn: classes, group: 'distribution') {
    baseName = project.computeBaseName()
    from sourceSets.main.allSource
    classifier = 'sources'
}

task testsJar(type: Jar, group: 'distribution') {
    baseName = project.computeBaseName()
    from sourceSets.test.output
    classifier = 'tests'
}

task dist(group: 'distribution') {
    dependsOn(build, sourcesJar, testsJar, javadoc)
}

task uberJar(type: Jar) {
    onlyIf {
        project.hasProperty("standalone") && project.standalone == "true"
    }
    classifier = 'fat'
    baseName = project.computeBaseName()
    from sourceSets.main.output
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    doFirst {
        manifest {
            if (project.mainClass.trim() == "" || project.mainVerticle.trim() == "") {
                throw new TaskExecutionException(project.tasks.jar, new RuntimeException("Missing mainClass or " +
                                                                                         "mainVerticle"))
            }
            attributes(['Main-Class': "${project.mainClass}", 'Main-Verticle': "${project.mainVerticle}"])
        }
    }
}
