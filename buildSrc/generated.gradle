task annotationProcessing(type: JavaCompile, group: 'build') {
    onlyIf {
        project.hasProperty('generated') && project.generated == "true"
    }
    def outputDir = new FileTreeBuilder(project.projectDir).dir(project.genProps.srcDir)
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.compileOnly
    destinationDir = project.file(project.genProps.javaSrcDir)
    options.compilerArgs = [
        "-proc:only",
        "-processor", "io.vertx.codegen.CodeGenProcessor",
        "-Acodegen.output=${outputDir.absolutePath}"
    ]
}
compileJava.dependsOn(annotationProcessing)

task generateServiceDescriptor(group: 'build') {
    onlyIf {
        project.hasProperty('serviceDescriptor')
    }
    doLast {
        if (project.serviceDescriptor.trim() == "" || project.mainVerticle.trim() == "") {
            throw new TaskExecutionException(project.tasks.processResources,
                                             new RuntimeException("Missing mainVerticle or serviceDescriptor"))
        }
        def contents = "{ \"main\": \"$project.mainVerticle\" }"
        new FileTreeBuilder(project.projectDir).dir(project.genProps.resourceDir) {
            file(project.serviceDescriptor + ".json") { write contents }
        }
    }
}

task generateConfigs(group: 'build') {
    onlyIf {
        project.hasProperty('executable') && project.executable == "true"
    }
    doLast {
        def confDir = new FileTreeBuilder(project.projectDir).dir(project.genProps.configDir)
        def projectName = project.computeBaseName()
        def moreLogger = project.hasProperty('specifiedLog') && project.specifiedLog ? project.specifiedLog.collect {
            k, v -> "<logger name=\"$k\" level=\"$v\"/>"
        }.join("\r\n") : ''
        copy {
            into confDir
            from("${rootDir}/conf/logger") {
                include "*.xml.template"
                rename '((?!console))+(.console)?\\.xml\\.template', '$1.xml'
                filter {
                    it.replaceAll("\\{\\{project\\}\\}", projectName).replaceAll("\\{\\{more_logger\\}\\}", moreLogger)
                }
            }
            from("src/main/resources") {
                include "*.json"
            }
        }
        if (configurations.runtimeClasspath.any { it.name.contains("cluster-hazelcast") }) {
            copy {
                into confDir
                from("${rootDir}/conf/cluster") {
                    include "*.xml.template"
                    rename '((?!member))+(.member)?.xml\\.template', 'cluster.xml'
                }
            }
        }
    }
}

processResources.dependsOn(generateServiceDescriptor, generateConfigs)
clean.doFirst {
    delete project.projectDir.toPath().resolve(project.genProps.genDir)
}

sourceSets {
    main {
        java {
            srcDirs += project.genProps.javaSrcDir
            resources.srcDirs += new File(project.projectDir.absolutePath, project.genProps.resourceDir)
        }
    }
    test {
        java {
            srcDirs += project.genProps.javaTestSrcDir
            resources.srcDirs += new File(project.projectDir.absolutePath, project.genProps.testResourceDir)
        }
    }
}
