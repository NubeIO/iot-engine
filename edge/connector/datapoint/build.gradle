import org.jooq.meta.jaxb.ForcedType

import com.nubeiot.buildscript.Strings
import com.nubeiot.buildscript.jooq.DB
import com.nubeiot.buildscript.jooq.JooqGenerateTask
import com.nubeiot.buildscript.jooq.JooqGenerateTask.JsonDataType

ext {
    specifiedLog = project.loggers["sql"] + ["h2database": "info"]
}

dependencies {
    compile project(":core:iotdata")
    compile project.deps.database.h2
    compile project(":core:scheduler")
    compile project(":core:micro")
    compile 'com.jayway.jsonpath:json-path:2.4.0'
}

task jooqGen(type: JooqGenerateTask) {
    packageName = "com.nubeiot.iotdata.model"
    enumTypes = project(':core:sql').ext.enumTypes
    dbTypes = project(':core:sql').ext.dbTypes + [
        new ForcedType(userType: "com.nubeiot.iotdata.dto.HistorySettingType",
                       types: DB.TYPES.varchar,
                       expression: Strings.toRegexIgnoreCase("history_setting_type"),
                       converter: "com.nubeiot.iotdata.converter.HistorySettingTypeConverter"),
        new ForcedType(userType: "com.nubeiot.iotdata.unit.DataType",
                       types: DB.TYPES.varchar,
                       expression: Strings.toRegexIgnoreCase("point_unit"),
                       converter: "com.nubeiot.iotdata.converter.DataTypeConverter"),
        new ForcedType(userType: "com.nubeiot.iotdata.dto.PointCategory",
                       types: DB.TYPES.varchar,
                       expression: Strings.toRegexIgnoreCase("point_category"),
                       converter: "com.nubeiot.iotdata.converter.PointCategoryConverter"),
        new ForcedType(userType: "com.nubeiot.iotdata.dto.PointKind",
                       types: DB.TYPES.varchar,
                       expression: Strings.toRegexIgnoreCase("point_kind"),
                       converter: "com.nubeiot.iotdata.converter.PointKindConverter"),
        new ForcedType(userType: "com.nubeiot.iotdata.dto.PointType",
                       types: DB.TYPES.varchar,
                       expression: Strings.toRegexIgnoreCase("point_type"),
                       converter: "com.nubeiot.iotdata.converter.PointTypeConverter"),
        new ForcedType(userType: "io.vertx.core.json.JsonArray",
                       types: DB.TYPES.array,
                       expression: Strings.toRegexIgnoreCase("weekdays"),
                       converter: "com.nubeiot.iotdata.converter.WeekDaysConverter")

    ]
    javaTypes = project(':core:sql').ext.javaTypes + [
        new JsonDataType(className: "com.nubeiot.iotdata.unit.DataType",
                         converter: "%s.value()",
                         parser: "com.nubeiot.iotdata.unit.DataType.factory((String)%s)",
                         defVal: "com.nubeiot.iotdata.unit.DataType.def()"),
        new JsonDataType(className: "com.nubeiot.iotdata.dto.HistorySettingType",
                         converter: "%s.type()",
                         parser: "com.nubeiot.iotdata.dto.HistorySettingType.factory((String)%s)",
                         defVal: "com.nubeiot.iotdata.dto.HistorySettingType.def()"),
        new JsonDataType(className: "com.nubeiot.iotdata.dto.PointCategory",
                         converter: "%s.type()",
                         parser: "com.nubeiot.iotdata.dto.PointCategory.factory((String)%s)",
                         defVal: "com.nubeiot.iotdata.dto.PointCategory.def()"),
        new JsonDataType(className: "com.nubeiot.iotdata.dto.PointKind",
                         converter: "%s.type()",
                         parser: "com.nubeiot.iotdata.dto.PointKind.factory((String)%s)",
                         defVal: "com.nubeiot.iotdata.dto.PointKind.def()"),
        new JsonDataType(className: "com.nubeiot.iotdata.dto.PointType",
                         converter: "%s.type()",
                         parser: "com.nubeiot.iotdata.dto.PointType.factory((String)%s)",
                         defVal: "com.nubeiot.iotdata.dto.PointType.def()")
    ]
}
