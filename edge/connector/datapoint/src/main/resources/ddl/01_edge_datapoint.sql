CREATE SCHEMA IF NOT EXISTS PUBLIC;

 CREATE TABLE IF NOT EXISTS MEASURE_UNIT ( 
	ID                   UUID NOT NULL ,
	MEASURE_TYPE         VARCHAR(15)  NOT NULL ,
	MEASURE_CATEGORY     VARCHAR(31) DEFAULT 'ALL' NOT NULL ,
	SYMBOL               VARCHAR(15)   ,
	LABEL                VARCHAR(1000)   ,
	POSSIBLE_VALUES_JSON VARCHAR(500)   ,
	TIME_AUDIT           VARCHAR(500)   ,
	CONSTRAINT IDX_UQ_MEASURE_UNIT UNIQUE ( MEASURE_TYPE, MEASURE_CATEGORY ) ,
	CONSTRAINT PK_MEASURE_UNIT PRIMARY KEY ( ID )
 );

CREATE TABLE IF NOT EXISTS DEVICE ( 
	ID                   UUID NOT NULL ,
	CODE                 VARCHAR(63)  NOT NULL ,
	STATIC_INFO_JSON	 TEXT   ,
	METADATA_JSON        TEXT   ,
	TIME_AUDIT           VARCHAR(500)   ,
	CONSTRAINT PK_DEVICE_ID PRIMARY KEY ( ID )
 );

COMMENT ON COLUMN DEVICE.CODE IS 'Device Code';

COMMENT ON COLUMN DEVICE.STATIC_INFO_JSON IS 'Static information';

COMMENT ON COLUMN DEVICE.METADATA_JSON IS 'Extra information';

CREATE TABLE IF NOT EXISTS POINT ( 
	ID                   UUID NOT NULL ,
	CODE                 VARCHAR(63)  NOT NULL ,
	DEVICE               UUID  NOT NULL ,
	TRANSDUCER           UUID   ,
	NETWORK              VARCHAR(63)   ,
	LABEL                VARCHAR(1000)   ,
	ENABLED              BOOLEAN DEFAULT TRUE NOT NULL ,
	POINT_CATEGORY       VARCHAR(31) DEFAULT 'UNKNOWN' NOT NULL ,
	POINT_KIND           VARCHAR(15) DEFAULT 'UNKNOWN' NOT NULL ,
	POINT_TYPE           VARCHAR(31) DEFAULT 'UNKNOWN' NOT NULL ,
	MEASURE_UNIT         UUID  NOT NULL ,
	MIN_SCALE            SMALLINT DEFAULT 0 NOT NULL ,
	MAX_SCALE            SMALLINT DEFAULT 10 NOT NULL ,
	"PRECISION"          SMALLINT DEFAULT 3 NOT NULL ,
	OFFSET_VAL           SMALLINT DEFAULT 0 NOT NULL ,
	"VERSION"            VARCHAR(31)   ,
	METADATA_JSON        TEXT   ,
	TIME_AUDIT           VARCHAR(500)   ,
	CONSTRAINT PK_POINT PRIMARY KEY ( ID ),
	CONSTRAINT IDX_UQ_POINT UNIQUE ( CODE, DEVICE ) 
 );

CREATE INDEX IDX_POINT_DEVICE_FK ON point ( DEVICE );

COMMENT ON TABLE POINT IS 'Represents for:\n- Edge device pin if category is GPIO\n- Virtual point if category is not GPIO';

COMMENT ON COLUMN POINT.POINT_CATEGORY IS 'One of BACNET | GPIO | MODBUS | UNKNOWN';

COMMENT ON COLUMN POINT.POINT_KIND IS 'INPUT|OUTPUT|UNKNOWN';

COMMENT ON COLUMN POINT.POINT_TYPE IS 'ANALOG | DIGITAL | DC_10 | DC_12 | MA_20 | THERMISTOR_10K';

CREATE TABLE IF NOT EXISTS POINT_HISTORY_DATA ( 
	POINT                UUID  NOT NULL ,
	"TIME"               TIMESTAMP NOT NULL ,
	"VALUE"              DOUBLE   ,
	SYNC_TO_CLOUD        BOOLEAN DEFAULT FALSE NOT NULL ,
	SYNC_TIME            TIMESTAMP,
	TIME_AUDIT           VARCHAR(500)   ,
	CONSTRAINT IDX_UQ_POINT_HISTORY_DATA UNIQUE ( POINT, "TIME" ) 
 );

CREATE INDEX IDX_HISTORY_DATA_POINT_FK ON POINT_HISTORY_DATA ( POINT );

CREATE INDEX IDX_POINT_HISTORY_DATA_TIME ON POINT_HISTORY_DATA ( "TIME" );

CREATE TABLE IF NOT EXISTS POINT_REALTIME_DATA ( 
	POINT                UUID  NOT NULL ,
	"TIME"               TIMESTAMP NOT NULL ,
	VALUE_JSON           TEXT   ,
	SYNC_TO_CLOUD        BOOLEAN DEFAULT FALSE NOT NULL ,
	SYNC_TIME            TIMESTAMP ,
	TIME_AUDIT           VARCHAR(500)   ,
	CONSTRAINT IDX_UQ_POINT_REALTIME_DATA UNIQUE ( POINT, "TIME" ) 
 );

CREATE INDEX IDX_FK_POINT_REALTIME_DATA_POINT ON POINT_REALTIME_DATA ( POINT );

CREATE INDEX IDX_POINT_REALTIME_DATA_TIME ON POINT_REALTIME_DATA ( "TIME" );

CREATE TABLE IF NOT EXISTS POINT_TAG ( 
	POINT                UUID  NOT NULL ,
	TAG_NAME             VARCHAR(63)  NOT NULL ,
	TAG_VALUE            VARCHAR(255)  NOT NULL ,
	TIME_AUDIT           VARCHAR(500)   ,
	CONSTRAINT PK_POINT_TAG PRIMARY KEY ( TAG_NAME, POINT )
 );

CREATE INDEX IDX_TAG_POINT_FK ON POINT_TAG ( POINT );

CREATE INDEX IDX_TAG_BY_POINT ON POINT_TAG ( TAG_NAME );

CREATE TABLE IF NOT EXISTS POINT_VALUE_DATA ( 
	POINT                UUID  NOT NULL ,
	"VALUE"              DOUBLE   ,
	PRIORITY             SMALLINT  NOT NULL ,
	PRIORITY_VALUES_JSON TEXT   ,
	TIME_AUDIT           VARCHAR(500)   ,
	CONSTRAINT PK_POINT_VALUE_DATA PRIMARY KEY ( POINT )
 );

CREATE TABLE IF NOT EXISTS REALTIME_SETTING ( 
	POINT                UUID  NOT NULL ,
	ENABLED              BOOLEAN DEFAULT FALSE NOT NULL ,
	TOLERANCE            DOUBLE   ,
	TIME_AUDIT           VARCHAR(500)   ,
	CONSTRAINT PK_REALTIME_SETTING PRIMARY KEY ( POINT )
 );

CREATE TABLE IF NOT EXISTS SCHEDULE_SETTING ( 
	ID                   UUID NOT NULL ,
	POINT                UUID NOT NULL ,
	RECURRING            BOOLEAN DEFAULT TRUE NOT NULL ,
	NAME                 VARCHAR(63)  NOT NULL ,
	COLOR                VARCHAR(15) DEFAULT '#FFFFFF' NOT NULL ,
	START_TIME           TIMESTAMP  NOT NULL ,
	END_TIME             TIMESTAMP  NOT NULL ,
	"VALUE"              DOUBLE  NOT NULL ,
	WEEKDAYS             ARRAY   ,
	TIME_AUDIT           VARCHAR(500)   ,
	CONSTRAINT PK_SCHEDULE_SETTING PRIMARY KEY ( ID )
 );

CREATE INDEX IDX_FK_SCHEDULE_POINT ON SCHEDULE_SETTING ( POINT );

CREATE TABLE IF NOT EXISTS HISTORY_SETTING ( 
	POINT                UUID  NOT NULL ,
	HISTORY_SETTING_TYPE VARCHAR(15)   ,
	SCHEDULE             VARCHAR(127)   ,
	TOLERANCE            DOUBLE   ,
	"SIZE"               INTEGER   ,
	TIME_AUDIT           VARCHAR(500)   ,
    CONSTRAINT PK_HISTORY_SETTING PRIMARY KEY ( POINT )
);

CREATE TABLE IF NOT EXISTS TRANSDUCERS ( 
	ID                   UUID NOT NULL ,
	CODE                 VARCHAR(63)  NOT NULL ,
	TRANSDUCER_TYPE      VARCHAR(15) DEFAULT 'SENSOR' NOT NULL ,
	TRANSDUCER_CATEGORY  VARCHAR(31)  NOT NULL ,
	LABEL                VARCHAR(1000)   ,
	TIME_AUDIT           VARCHAR(500)   ,
	CONSTRAINT PK_TRANSDUCER PRIMARY KEY ( ID ),
	CONSTRAINT IDX_UQ_TRANSDUCER UNIQUE ( CODE, TRANSDUCER_TYPE, TRANSDUCER_CATEGORY ) 
 );

COMMENT ON TABLE TRANSDUCERS IS 'Represents for a set of actual transducers that plugged in device point. Mean that one or many transducers from one or many equipment, no duplicate and must be same type and category.\nIt can be differenced by type: `SENSOR | ACTUATOR` and categorized by SENSOR kinds or ACTUATOR kinds';

COMMENT ON COLUMN TRANSDUCERS.CODE IS 'User define code. Default it will be';

COMMENT ON COLUMN TRANSDUCERS.TRANSDUCER_TYPE IS 'SENSOR | ACTUATOR';

COMMENT ON COLUMN TRANSDUCERS.TRANSDUCER_CATEGORY IS 'Transducer Category. It can be `TEMP`, `HUMIDITY`, `MOTION`, `VELOCITY`, etc';

CREATE TABLE IF NOT EXISTS EQUIPMENT ( 
	ID                   UUID NOT NULL ,
	CODE                 VARCHAR(63)  NOT NULL ,
	LABEL                VARCHAR(1000)   ,
	EQUIP_TYPE           VARCHAR(63)  NOT NULL ,
	MANUFACTURER         VARCHAR(500)   ,
	METADATA_JSON        TEXT   ,
	TIME_AUDIT           VARCHAR(500)   ,
	CONSTRAINT PK_EQUIPMENT PRIMARY KEY ( ID ),
	CONSTRAINT IDX_UQ_EQUIPMENT UNIQUE ( CODE, EQUIP_TYPE ) 
 );

COMMENT ON TABLE EQUIPMENT IS 'Equipment';

COMMENT ON COLUMN EQUIPMENT.CODE IS 'Equipment code from manufacturer';

COMMENT ON COLUMN EQUIPMENT.EQUIP_TYPE IS 'For example: HVAC | Fire Detection | Lightning | Water';

COMMENT ON COLUMN EQUIPMENT.MANUFACTURER IS 'Manufacturing company';

COMMENT ON COLUMN EQUIPMENT.METADATA_JSON IS 'Extra information';

CREATE TABLE IF NOT EXISTS DEVICE_EQUIP ( 
	DEVICE               UUID  NOT NULL ,
	EQUIP                UUID  NOT NULL ,
	NETWORK              VARCHAR(63)    ,
	NETWORK_LABEL        VARCHAR(1000)  ,
	TIME_AUDIT           VARCHAR(500)   ,
	CONSTRAINT IDX_DEVICE_EQUIPMENT PRIMARY KEY ( DEVICE, EQUIP )
 );

CREATE TABLE IF NOT EXISTS TRANSDUCER_EQUIP ( 
	EQUIP                UUID  NOT NULL ,
	TRANSDUCER           UUID  NOT NULL ,
	TRANSDUCER_CODE      VARCHAR(127)   ,
	TRANSDUCER_LABEL     VARCHAR(1000)  ,
	MEASURE_UNIT         UUID   ,
	TIME_AUDIT           VARCHAR(500)   ,
	CONSTRAINT PK_TRANSDUCER_EQUIPMENT PRIMARY KEY ( EQUIP, TRANSDUCER ),
	CONSTRAINT IDX_UQ_TRANSDUCER_EQUIP UNIQUE ( EQUIP, TRANSDUCER_CODE ) 
 );

COMMENT ON TABLE TRANSDUCER_EQUIP IS 'Details a set of transducer by equipment';

COMMENT ON COLUMN TRANSDUCER_EQUIP.TRANSDUCER_CODE IS 'Manufacturer product transducer code depends on equipment';

COMMENT ON COLUMN TRANSDUCER_EQUIP.TRANSDUCER_LABEL IS 'Manufacturer transducer label depends on equipment';

COMMENT ON COLUMN TRANSDUCER_EQUIP.MEASURE_UNIT IS 'Standard manufacturer transducer measure unit';

-- ALTER FK
ALTER TABLE POINT_REALTIME_DATA ADD CONSTRAINT FK_POINT_REALTIME_DATA_POINT FOREIGN KEY ( POINT ) REFERENCES POINT( ID ) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE REALTIME_SETTING ADD CONSTRAINT FK_REALTIME_SETTING_POINT FOREIGN KEY ( POINT ) REFERENCES POINT( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE SCHEDULE_SETTING ADD CONSTRAINT FK_SCHEDULE_POINT FOREIGN KEY ( POINT ) REFERENCES POINT( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE HISTORY_SETTING ADD CONSTRAINT HISTORY_SETTING_POINT_FK FOREIGN KEY ( POINT ) REFERENCES POINT( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE POINT ADD CONSTRAINT POINT_DEVICE_FK FOREIGN KEY ( DEVICE ) REFERENCES DEVICE( ID ) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE POINT ADD CONSTRAINT FK_POINT_MEASURE_UNIT FOREIGN KEY ( MEASURE_UNIT ) REFERENCES MEASURE_UNIT( id ) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE POINT ADD CONSTRAINT FK_POINT_TRANSDUCER FOREIGN KEY ( TRANSDUCER ) REFERENCES TRANSDUCERS( ID ) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE POINT_TAG ADD CONSTRAINT TAG_POINT_FK FOREIGN KEY ( POINT ) REFERENCES POINT( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE POINT_HISTORY_DATA ADD CONSTRAINT HISTORY_DATA_POINT_FK FOREIGN KEY ( POINT ) REFERENCES POINT( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE POINT_VALUE_DATA ADD CONSTRAINT VALUE_POINT_FK FOREIGN KEY ( POINT ) REFERENCES POINT( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE DEVICE_EQUIP ADD CONSTRAINT FK_DEVICE_EQUIPMENT_DEVICE FOREIGN KEY ( DEVICE ) REFERENCES DEVICE( ID ) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE DEVICE_EQUIP ADD CONSTRAINT FK_DEVICE_EQUIP_EQUIP FOREIGN KEY ( EQUIP ) REFERENCES EQUIPMENT( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE TRANSDUCER_EQUIP ADD CONSTRAINT FK_TRANSDUCER_EQUIP_EQUIP FOREIGN KEY ( EQUIP ) REFERENCES EQUIPMENT( ID ) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE TRANSDUCER_EQUIP ADD CONSTRAINT FK_TRANSDUCER_EQUIP_TRANSDUCER FOREIGN KEY ( TRANSDUCER ) REFERENCES TRANSDUCERS( ID ) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE TRANSDUCER_EQUIP ADD CONSTRAINT FK_TRANSDUCER_EQUIP_MEASURE FOREIGN KEY ( MEASURE_UNIT ) REFERENCES MEASURE_UNIT( ID ) ON DELETE RESTRICT ON UPDATE CASCADE;
