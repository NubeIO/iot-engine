/*
 * This file is generated by jOOQ.
*/
package com.nubeiot.edge.core.model.gen.tables.daos;

import java.util.Date;
import java.util.List;
import java.util.Optional;
import javax.annotation.Generated;

import org.jooq.Configuration;

import com.nubeiot.core.enums.Status;
import com.nubeiot.core.event.EventAction;
import com.nubeiot.edge.core.model.gen.tables.TblTransaction;
import com.nubeiot.edge.core.model.gen.tables.records.TblTransactionRecord;

import io.github.jklingsporn.vertx.jooq.rx.jdbc.JDBCRXQueryExecutor;
import io.github.jklingsporn.vertx.jooq.shared.internal.AbstractVertxDAO;
import io.reactivex.Single;
import io.vertx.core.json.JsonObject;
/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TblTransactionDao extends AbstractVertxDAO<TblTransactionRecord, com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction, String, Single<List<com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction>>, Single<Optional<com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction>>, Single<Integer>, Single<String>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<TblTransactionRecord, com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction,String> {

    /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
    public TblTransactionDao(Configuration configuration, io.vertx.reactivex.core.Vertx vertx) {
        super(TblTransaction.TBL_TRANSACTION, com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction.class, new JDBCRXQueryExecutor<TblTransactionRecord, com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction,String>(
                com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction.class, configuration, vertx), configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction object) {
        return object.getTransactionId();
    }

    /**
     * Find records that have <code>module_id IN (events)</code> asynchronously
     */
    public Single<List<com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction>> findManyByModuleId(List<String> values) {
        return findManyByCondition(TblTransaction.TBL_TRANSACTION.MODULE_ID.in(values));
    }

    /**
     * Find records that have <code>event IN (events)</code> asynchronously
     */
    public Single<List<com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction>> findManyByEvent(
            List<EventAction> values) {
        return findManyByCondition(TblTransaction.TBL_TRANSACTION.EVENT.in(values));
    }

    /**
     * Find records that have <code>status IN (events)</code> asynchronously
     */
    public Single<List<com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction>> findManyByStatus(List<Status> values) {
        return findManyByCondition(TblTransaction.TBL_TRANSACTION.STATUS.in(values));
    }

    /**
     * Find records that have <code>issued_at IN (events)</code> asynchronously
     */
    public Single<List<com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction>> findManyByIssuedAt(List<Date> values) {
        return findManyByCondition(TblTransaction.TBL_TRANSACTION.ISSUED_AT.in(values));
    }

    /**
     * Find records that have <code>issued_by IN (events)</code> asynchronously
     */
    public Single<List<com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction>> findManyByIssuedBy(List<String> values) {
        return findManyByCondition(TblTransaction.TBL_TRANSACTION.ISSUED_BY.in(values));
    }

    /**
     * Find records that have <code>issued_from IN (events)</code> asynchronously
     */
    public Single<List<com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction>> findManyByIssuedFrom(List<String> values) {
        return findManyByCondition(TblTransaction.TBL_TRANSACTION.ISSUED_FROM.in(values));
    }

    /**
     * Find records that have <code>modified_at IN (events)</code> asynchronously
     */
    public Single<List<com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction>> findManyByModifiedAt(List<Date> values) {
        return findManyByCondition(TblTransaction.TBL_TRANSACTION.MODIFIED_AT.in(values));
    }

    /**
     * Find records that have <code>prev_state_json IN (events)</code> asynchronously
     */
    public Single<List<com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction>> findManyByPrevStateJson(List<JsonObject> values) {
        return findManyByCondition(TblTransaction.TBL_TRANSACTION.PREV_STATE_JSON.in(values));
    }

    /**
     * Find records that have <code>last_error_json IN (events)</code> asynchronously
     */
    public Single<List<com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction>> findManyByLastErrorJson(List<JsonObject> values) {
        return findManyByCondition(TblTransaction.TBL_TRANSACTION.LAST_ERROR_JSON.in(values));
    }

    /**
     * Find records that have <code>retry IN (events)</code> asynchronously
     */
    public Single<List<com.nubeiot.edge.core.model.gen.tables.pojos.TblTransaction>> findManyByRetry(List<Integer> values) {
        return findManyByCondition(TblTransaction.TBL_TRANSACTION.RETRY.in(values));
    }
}
