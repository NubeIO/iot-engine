CREATE SCHEMA IF NOT EXISTS PUBLIC;

CREATE TABLE IF NOT EXISTS EDGE (
	ID                   uuid          NOT NULL,
	CODE                 varchar(63)   NOT NULL,
	CUSTOMER_CODE        varchar(31)   NOT NULL,
	SITE_CODE            varchar(63)   NOT NULL,
	MODEL                varchar(255)  DEFAULT 'Nube EdgeIO-28' NOT NULL,
	FIRMWARE_VERSION     varchar(127)  DEFAULT 'v2' NOT NULL,
	OS_VERSION           varchar(127)   ,
	SOFTWARE_VERSION     varchar(127)   ,
	DATA_VERSION         varchar(15)  DEFAULT '0.0.2' NOT NULL,
	METADATA_JSON        clob(2147483647)   ,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
	CONSTRAINT PK_EDGE_ID PRIMARY KEY ( ID )
 );

COMMENT ON COLUMN EDGE.CODE IS 'Edge Code';
COMMENT ON COLUMN EDGE.DATA_VERSION IS 'Legacy version: startswith 0.0.x. 0.0.1: default lowdb - 0.0.2: migrate point - 0.0.3: migrate equipment. 1.0.0: production with fully support `alert` and `schedule`';
COMMENT ON COLUMN EDGE.METADATA_JSON IS 'Extra information';

CREATE TABLE IF NOT EXISTS NETWORK (
	ID                   uuid           NOT NULL,
	CODE                 varchar(63)    NOT NULL,
	EDGE                 uuid           NOT NULL,
	PROTOCOL             varchar(31)  DEFAULT 'UNKNOWN' NOT NULL,
	STATE                varchar(31)  DEFAULT 'NONE' NOT NULL,
	LABEL                varchar(1000)   ,
	METADATA_JSON        clob(2147483647)   ,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
	CONSTRAINT PK_NETWORK_ID PRIMARY KEY ( ID ),
	CONSTRAINT IDX_UQ_NETWORK UNIQUE ( CODE, EDGE, PROTOCOL )
 );

CREATE INDEX IDX_NETWORK_EDGE_PROTOCOL ON NETWORK ( EDGE, PROTOCOL );

COMMENT ON COLUMN NETWORK.CODE IS 'Network Code should be subnet name or Network card interface name';

CREATE TABLE IF NOT EXISTS DEVICE (
	ID                   uuid          NOT NULL,
	CODE                 varchar(63)   NOT NULL,
	PROTOCOL             varchar(31)   DEFAULT 'UNKNOWN' NOT NULL,
	DEVICE_TYPE          varchar(63)   NOT NULL,
	STATE                varchar(31)   DEFAULT 'NONE' NOT NULL,
	NAME                 varchar(127)   ,
	MANUFACTURER         varchar(500)   ,
	MODEL                varchar(255)   ,
	FIRMWARE_VERSION     varchar(127)   ,
	SOFTWARE_VERSION     varchar(127)   ,
	LABEL                varchar(1000)  ,
	METADATA_JSON        clob(2147483647)   ,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
	CONSTRAINT PK_DEVICE PRIMARY KEY ( ID ),
	CONSTRAINT IDX_UQ_DEVICE UNIQUE ( CODE, PROTOCOL )
 );

COMMENT ON TABLE DEVICE IS 'Remote Device is connected and managed by NubeIO Edge';
COMMENT ON COLUMN DEVICE.CODE IS 'Device code that is identified in communication protocol network';
COMMENT ON COLUMN DEVICE.DEVICE_TYPE IS 'For example: MACHINE | GATEWAY | EQUIPMENT';
COMMENT ON COLUMN DEVICE.MANUFACTURER IS 'Manufacturing company';
COMMENT ON COLUMN DEVICE.METADATA_JSON IS 'Extra information';

CREATE TABLE IF NOT EXISTS MEASURE_UNIT (
	MEASURE_TYPE         varchar(63)  NOT NULL,
	MEASURE_CATEGORY     varchar(63)  DEFAULT 'ALL' NOT NULL,
	SYMBOL               varchar(15)   ,
	LABEL                varchar(1000)   ,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
	CONSTRAINT PK_MEASURE_UNIT PRIMARY KEY ( MEASURE_TYPE )
 );

CREATE INDEX IDX_MEASURE_UNIT_CATEGORY ON MEASURE_UNIT ( MEASURE_CATEGORY );

CREATE TABLE IF NOT EXISTS TRANSDUCER (
	ID                   uuid   NOT NULL,
	CODE                 varchar(127)   ,
	DEVICE_ID            uuid   NOT NULL,
	TRANSDUCER_TYPE      varchar(15)  DEFAULT 'SENSOR' NOT NULL,
	TRANSDUCER_CATEGORY  varchar(63)   NOT NULL,
	LABEL                varchar(1000)   ,
	MEASURE_UNIT         varchar(63)   ,
	METADATA_JSON        clob(2147483647)   ,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
	CONSTRAINT PK_TRANSDUCER PRIMARY KEY ( ID ),
	CONSTRAINT IDX_UQ_TRANSDUCER UNIQUE ( CODE, DEVICE_ID )
 );

CREATE INDEX IDX_TRANSDUCER_DEVICE ON TRANSDUCER ( DEVICE_ID );

CREATE INDEX IDX_TRANSDUCER_TYPE ON TRANSDUCER ( TRANSDUCER_TYPE );

CREATE INDEX IDX_TRANSDUCER_CATEGORY ON TRANSDUCER ( TRANSDUCER_TYPE, TRANSDUCER_CATEGORY );

COMMENT ON TABLE TRANSDUCER IS 'Real physical Transducer in Device';
COMMENT ON COLUMN TRANSDUCER.CODE IS 'Manufacturer product transducer code depends on device';
COMMENT ON COLUMN TRANSDUCER.TRANSDUCER_TYPE IS 'SENSOR | ACTUATOR';
COMMENT ON COLUMN TRANSDUCER.TRANSDUCER_CATEGORY IS 'Transducer Category depends on Transducer Type. It can be `TEMP`, `HUMIDITY`, `MOTION`, `VELOCITY`, etc';
COMMENT ON COLUMN TRANSDUCER.LABEL IS 'Manufacturer transducer label depends on device';
COMMENT ON COLUMN TRANSDUCER.MEASURE_UNIT IS 'Standard manufacturer transducer measure unit';


CREATE TABLE IF NOT EXISTS EDGE_DEVICE (
	ID                   bigint GENERATED ALWAYS AS IDENTITY  NOT NULL,
	EDGE_ID              uuid   NOT NULL,
	NETWORK_ID           uuid   NOT NULL,
	DEVICE_ID            uuid   NOT NULL,
	ADDRESS_JSON         clob(2147483647)   ,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
	CONSTRAINT IDX_UQ_EDGE_DEVICE UNIQUE ( EDGE_ID, DEVICE_ID ) ,
	CONSTRAINT PK_EDGE_DEVICE PRIMARY KEY ( ID )
 );

CREATE INDEX IDX_FK_EDGE_DEVICE_NETWORK ON EDGE_DEVICE ( NETWORK_ID );

CREATE TABLE IF NOT EXISTS POINT ( 
	ID                   uuid   NOT NULL,
	CODE                 varchar(63)   NOT NULL,
	EDGE                 uuid   NOT NULL,
	NETWORK              uuid   NOT NULL,
	LABEL                varchar(1000)   ,
	ENABLED              boolean  DEFAULT TRUE NOT NULL,
	PROTOCOL             varchar(31)  DEFAULT 'UNKNOWN' NOT NULL,
	POINT_KIND           varchar(15)  DEFAULT 'UNKNOWN' NOT NULL,
	POINT_TYPE           varchar(31)  DEFAULT 'UNKNOWN' NOT NULL,
	MEASURE_UNIT         varchar(63)  NOT NULL,
	MEASURE_UNIT_ALIAS   varchar(500)   ,
	MIN_SCALE            smallint,
	MAX_SCALE            smallint,
	PRECISION            smallint,
	OFFSET_VAL           smallint,
	VERSION              varchar(31)   ,
	METADATA_JSON        clob(2147483647)   ,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
	CONSTRAINT PK_POINT PRIMARY KEY ( ID ),
	CONSTRAINT IDX_UQ_POINT UNIQUE ( CODE, EDGE, NETWORK )
 );

CREATE INDEX IDX_FK_POINT_MEASURE_UNIT ON POINT ( MEASURE_UNIT );

CREATE INDEX IDX_FK_POINT_EDGE ON POINT ( EDGE );

CREATE INDEX IDX_FK_POINT_NETWORK ON POINT ( NETWORK );

COMMENT ON TABLE POINT IS 'Represents for:\n- Edge PIN if category is GPIO\n- Virtual point if category is not GPIO';
COMMENT ON COLUMN POINT.PROTOCOL IS 'One of BACNET | GPIO | MODBUS | UNKNOWN';
COMMENT ON COLUMN POINT.POINT_KIND IS 'INPUT|OUTPUT|UNKNOWN';
COMMENT ON COLUMN POINT.POINT_TYPE IS 'ANALOG | DIGITAL | DC_10 | DC_12 | MA_20 | THERMISTOR_10K';

CREATE TABLE IF NOT EXISTS POINT_TRANSDUCER (
	ID                   bigint GENERATED ALWAYS AS IDENTITY  NOT NULL,
	POINT_ID             uuid   NOT NULL,
	DEVICE_ID            uuid,
	TRANSDUCER_ID        uuid,
	COMPUTED_TRANSDUCER  varchar(63)   ,
	NETWORK_ID           uuid,
	EDGE_ID              uuid,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
	CONSTRAINT PK_POINT_TRANSDUCER PRIMARY KEY ( ID ),
	CONSTRAINT IDX_UQ_POINT_TRANSDUCER UNIQUE ( POINT_ID, DEVICE_ID, TRANSDUCER_ID ) ,
	CONSTRAINT IDX_UQ_POINT_TRANSDUCER_COMPUTED UNIQUE ( COMPUTED_TRANSDUCER )
 );

CREATE INDEX IDX_POINT_TRANSDUCER_DEVICE ON POINT_TRANSDUCER ( DEVICE_ID );

CREATE INDEX IDX_POINT_TRANSDUCER_POINT ON POINT_TRANSDUCER ( POINT_ID );

CREATE INDEX IDX_POINT_TRANSDUCER_TRANSDUCER ON POINT_TRANSDUCER ( TRANSDUCER_ID );

COMMENT ON TABLE POINT_TRANSDUCER IS 'Represents for Point is attached to zero and more specific Transducers.\nTransducer with type is SENSOR is attached to only one Point. It will be validated by COMPUTED_TRANSDUCER field.\nField: DEVICE_ID, NETWORK_ID, EDGE_ID, COMPUTED_TRANSDUCER is computed by TRIGGER: com.nubeiot.edge.module.datapoint.trigger.PointTransducerTrigger';
COMMENT ON COLUMN POINT_TRANSDUCER.COMPUTED_TRANSDUCER IS 'Computed Transducer Id and Transducer Type to ensure unique sensor transducer';
COMMENT ON COLUMN POINT_TRANSDUCER.EDGE_ID IS 'Egde value is inherited from Point';
COMMENT ON COLUMN POINT_TRANSDUCER.NETWORK_ID IS 'Network value is inherited from Point';

CREATE TABLE IF NOT EXISTS POINT_HISTORY_DATA (
	ID                   bigint GENERATED ALWAYS AS IDENTITY  NOT NULL,
	POINT                uuid   NOT NULL,
	TIME                 timestamp   NOT NULL,
	VALUE                double   ,
	PRIORITY             integer  ,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
	CONSTRAINT IDX_UQ_POINT_HISTORY_DATA UNIQUE ( POINT, TIME ) ,
	CONSTRAINT PK_POINT_HISTORY_DATA PRIMARY KEY ( ID )
 );

CREATE INDEX IDX_FK_HISTORY_DATA_POINT ON POINT_HISTORY_DATA ( POINT );

CREATE INDEX IDX_POINT_HISTORY_DATA_TIME ON POINT_HISTORY_DATA ( TIME );

CREATE TABLE IF NOT EXISTS POINT_REALTIME_DATA ( 
	ID                   bigint GENERATED ALWAYS AS IDENTITY  NOT NULL,
	POINT                uuid   NOT NULL,
	TIME                 timestamp   NOT NULL,
	VALUE_JSON           clob(2147483647)   ,
	PRIORITY             integer  ,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
	CONSTRAINT IDX_UQ_POINT_REALTIME_DATA UNIQUE ( POINT, TIME ) ,
	CONSTRAINT PK_POINT_REALTIME_DATA PRIMARY KEY ( ID )
 );

CREATE INDEX IDX_FK_POINT_REALTIME_DATA_POINT ON POINT_REALTIME_DATA ( POINT );

CREATE INDEX IDX_POINT_REALTIME_DATA_TIME ON POINT_REALTIME_DATA ( TIME );

CREATE TABLE IF NOT EXISTS POINT_TAG ( 
	ID                   bigint GENERATED ALWAYS AS IDENTITY  NOT NULL,
	TAG_NAME             varchar(63)   NOT NULL,
	POINT                uuid   NOT NULL,
	TAG_VALUE            varchar(255)   NOT NULL,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
	CONSTRAINT IDX_UQ_POINT_TAG UNIQUE ( TAG_NAME, POINT ) ,
	CONSTRAINT PK_POINT_TAG PRIMARY KEY ( ID )
 );

CREATE INDEX IDX_FK_TAG_POINT ON POINT_TAG ( POINT );

CREATE INDEX IDX_TAG_BY_POINT ON POINT_TAG ( TAG_NAME );

CREATE TABLE IF NOT EXISTS POINT_VALUE_DATA ( 
	POINT                uuid   NOT NULL,
	VALUE                double   ,
	PRIORITY             integer   NOT NULL,
	PRIORITY_VALUES      varchar(500)   ,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
	CONSTRAINT PK_POINT_VALUE_DATA PRIMARY KEY ( POINT )
 );

CREATE TABLE IF NOT EXISTS REALTIME_SETTING ( 
	POINT                uuid   NOT NULL,
	ENABLED              boolean  DEFAULT FALSE NOT NULL,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
	CONSTRAINT PK_REALTIME_SETTING PRIMARY KEY ( POINT )
 );

CREATE TABLE IF NOT EXISTS SCHEDULE_SETTING ( 
	ID                   uuid   NOT NULL,
	POINT                uuid   NOT NULL,
	ENABLED              boolean  DEFAULT FALSE NOT NULL,
	RECURRING            boolean  DEFAULT TRUE NOT NULL,
	NAME                 varchar(63)  NOT NULL,
	COLOR                varchar(15)  DEFAULT '#FFFFFF' NOT NULL,
	START_TIME           timestamp   NOT NULL,
	END_TIME             timestamp   NOT NULL,
	VALUE                double   NOT NULL,
	WEEKDAYS             array   ,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
	CONSTRAINT PK_SCHEDULE_SETTING PRIMARY KEY ( ID )
 );

CREATE INDEX IDX_FK_SCHEDULE_POINT ON SCHEDULE_SETTING ( POINT );

CREATE TABLE IF NOT EXISTS HISTORY_SETTING ( 
	POINT                uuid   NOT NULL,
	ENABLED              boolean  DEFAULT TRUE NOT NULL,
	HISTORY_SETTING_TYPE varchar(15)   ,
	SCHEDULE             varchar(127)   ,
	TOLERANCE            double   ,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
    CONSTRAINT PK_HISTORY_SETTING PRIMARY KEY ( POINT )
);

CREATE TABLE IF NOT EXISTS FOLDER (
	PUI_ID               uuid  NOT NULL,
	NAME                 varchar(100) NOT NULL,
	EDGE_ID              uuid NOT NULL,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
    CONSTRAINT IDX_UQ_FOLDER UNIQUE ( NAME ),
    CONSTRAINT PK_FOLDER PRIMARY KEY ( PUI_ID )
);

CREATE TABLE IF NOT EXISTS FOLDER_GROUP (
	PUI_ID               uuid  NOT NULL,
	GROUP_LEVEL          varchar(15) NOT NULL,
	FOLDER_PUI_ID        uuid NOT NULL,
	NETWORK_ID           uuid,
	DEVICE_ID            uuid,
	POINT_ID             uuid,
	PARENT_FOLDER_PUI_ID uuid,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
    CONSTRAINT PK_FOLDER_GROUP PRIMARY KEY ( PUI_ID )
);

CREATE INDEX IDX_FOLDER_GROUP_FOLDER ON FOLDER_GROUP ( GROUP_LEVEL, FOLDER_PUI_ID );

CREATE INDEX IDX_FOLDER_GROUP_NETWORK ON FOLDER_GROUP ( NETWORK_ID );

CREATE INDEX IDX_FOLDER_GROUP_DEVICE ON FOLDER_GROUP ( DEVICE_ID );

CREATE INDEX IDX_FOLDER_GROUP_POINT ON FOLDER_GROUP ( POINT_ID );

CREATE INDEX IDX_FOLDER_GROUP_PARENT ON FOLDER_GROUP ( PARENT_FOLDER_PUI_ID );

COMMENT ON COLUMN FOLDER_GROUP.GROUP_LEVEL IS 'EDGE or NETWORK or DEVICE or FOLDER';

CREATE TABLE IF NOT EXISTS PROTOCOL_DISPATCHER (
    ID                   integer GENERATED ALWAYS AS IDENTITY  NOT NULL,
	ENTITY               varchar(127)   NOT NULL,
	ACTION               varchar(31)    NOT NULL,
	PROTOCOL             varchar(31)    DEFAULT 'UNKNOWN' NOT NULL,
	ADDRESS              varchar(255)   NOT NULL,
	GLOBAL               boolean        DEFAULT FALSE NOT NULL,
	STATE                varchar(31)    DEFAULT 'NONE' NOT NULL,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
    CONSTRAINT PK_PROTOCOL_DISPATCHER PRIMARY KEY ( ID ),
	CONSTRAINT IDX_UQ_PROTOCOL_DISPATCHER UNIQUE ( ENTITY, ACTION, PROTOCOL )
);

CREATE TABLE IF NOT EXISTS SYNC_DISPATCHER (
	ID                   integer GENERATED ALWAYS AS IDENTITY  NOT NULL,
	SYNC_TYPE            varchar(31)  NOT NULL,
	STATE                varchar(31)  DEFAULT 'NONE' NOT NULL,
	CONFIGURATION_JSON   clob(2147483647)   ,
	TIME_AUDIT           varchar(500)   ,
	SYNC_AUDIT           clob(2147483647)   ,
	CONSTRAINT PK_SYNC_DISPATCHER PRIMARY KEY ( ID ),
	CONSTRAINT IDX_UQ_SYNC_DISPATCHER UNIQUE ( SYNC_TYPE )
 );

-- ALTER FK
ALTER TABLE EDGE_DEVICE ADD CONSTRAINT FK_EDGE_DEVICE_EDGE FOREIGN KEY ( EDGE_ID ) REFERENCES EDGE( ID ) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE EDGE_DEVICE ADD CONSTRAINT FK_EDGE_DEVICE_NETWORK FOREIGN KEY ( NETWORK_ID ) REFERENCES NETWORK( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE EDGE_DEVICE ADD CONSTRAINT FK_EDGE_DEVICE_DEVICE FOREIGN KEY ( DEVICE_ID ) REFERENCES DEVICE( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE HISTORY_SETTING ADD CONSTRAINT FK_HISTORY_SETTING_POINT FOREIGN KEY ( POINT ) REFERENCES POINT( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE NETWORK ADD CONSTRAINT FK_NETWORK_EDGE FOREIGN KEY ( EDGE ) REFERENCES EDGE( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE POINT ADD CONSTRAINT FK_POINT_EDGE FOREIGN KEY ( EDGE ) REFERENCES EDGE( ID ) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE POINT ADD CONSTRAINT FK_POINT_NETWORK FOREIGN KEY ( NETWORK ) REFERENCES NETWORK( ID ) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE POINT ADD CONSTRAINT FK_POINT_MEASURE_UNIT FOREIGN KEY ( MEASURE_UNIT ) REFERENCES MEASURE_UNIT( MEASURE_TYPE ) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE POINT_HISTORY_DATA ADD CONSTRAINT FK_HISTORY_DATA_POINT FOREIGN KEY ( POINT ) REFERENCES POINT( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE POINT_REALTIME_DATA ADD CONSTRAINT FK_POINT_REALTIME_DATA_POINT FOREIGN KEY ( POINT ) REFERENCES POINT( ID ) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE POINT_TAG ADD CONSTRAINT FK_TAG_POINT FOREIGN KEY ( POINT ) REFERENCES POINT( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE POINT_VALUE_DATA ADD CONSTRAINT FK_VALUE_POINT FOREIGN KEY ( POINT ) REFERENCES POINT( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE REALTIME_SETTING ADD CONSTRAINT FK_REALTIME_SETTING_POINT FOREIGN KEY ( POINT ) REFERENCES POINT( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE SCHEDULE_SETTING ADD CONSTRAINT FK_SCHEDULE_POINT FOREIGN KEY ( POINT ) REFERENCES POINT( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE TRANSDUCER ADD CONSTRAINT FK_TRANSDUCER_DEVICE FOREIGN KEY ( DEVICE_ID ) REFERENCES DEVICE( ID ) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE TRANSDUCER ADD CONSTRAINT FK_TRANSDUCER_MEASURE FOREIGN KEY ( MEASURE_UNIT ) REFERENCES MEASURE_UNIT( MEASURE_TYPE ) ON DELETE RESTRICT ON UPDATE CASCADE;

ALTER TABLE POINT_TRANSDUCER ADD CONSTRAINT FK_POINT_TRANSDUCER_POINT FOREIGN KEY ( POINT_ID ) REFERENCES POINT( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE POINT_TRANSDUCER ADD CONSTRAINT FK_POINT_TRANSDUCER_DEVICE FOREIGN KEY ( DEVICE_ID ) REFERENCES DEVICE( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE POINT_TRANSDUCER ADD CONSTRAINT FK_POINT_TRANSDUCER_TRANSDUCER FOREIGN KEY ( TRANSDUCER_ID ) REFERENCES TRANSDUCER( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE FOLDER ADD CONSTRAINT FK_FOLDER_EDGE FOREIGN KEY ( EDGE_ID ) REFERENCES EDGE( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE FOLDER_GROUP ADD CONSTRAINT FK_FOLDER_GROUP_FOLDER FOREIGN KEY ( FOLDER_PUI_ID ) REFERENCES FOLDER( PUI_ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE FOLDER_GROUP ADD CONSTRAINT FK_FOLDER_GROUP_NETWORK FOREIGN KEY ( NETWORK_ID ) REFERENCES NETWORK( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE FOLDER_GROUP ADD CONSTRAINT FK_FOLDER_GROUP_DEVICE FOREIGN KEY ( DEVICE_ID ) REFERENCES DEVICE( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE FOLDER_GROUP ADD CONSTRAINT FK_FOLDER_GROUP_POINT FOREIGN KEY ( POINT_ID ) REFERENCES POINT( ID ) ON DELETE CASCADE ON UPDATE CASCADE;

-- ALTER TABLE FOLDER_GROUP ADD CONSTRAINT FK_FOLDER_GROUP_PARENT_FOLDER FOREIGN KEY ( PARENT_FOLDER_PUI_ID ) REFERENCES FOLDER( PUI_ID ) ON DELETE CASCADE ON UPDATE CASCADE;
--